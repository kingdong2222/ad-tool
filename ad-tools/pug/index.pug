extends layout.pug

//- Setting
block setting
	- var layout = true
	- var loading = false
	- var header = true
	//- - var navbar = true
	- var modal = true
	- var popperjs = true
	- var tippyjs = true

block head
	include head.pug

block pages
	- bodyC.push("")
	- layoutClasses.push("ad-desktop")
	- headerClasses.push("header")
	- bodyClasses.push("page-content")
	
//- Add Header
block header
	include page/header.pug

//- Add Body
block body
	include page/_index.pug

//- Add Modal
block modal
	include page/modal_edit_img.pug

block javaScripts extend
	script.
		const button_toogle_slide = document.getElementById('button-toggle-slide-bar')
		const main_body = document.getElementsByClassName('main-body')[0]
		const slide_body = document.getElementsByClassName('slide-body')[0]
		button_toogle_slide.onclick = () => {
			main_body.classList.toggle("expanded");
			slide_body.classList.toggle("narrowed")
			const icon_toggle = button_toogle_slide.getElementsByClassName('icz')[0]
			icon_toggle.classList.toggle('icz-right')
			icon_toggle.classList.toggle('icz-left')
		}

		$(".close-modal").click(function(){
			$("html").removeClass("overlay-modal");
			$(".modal").removeClass("show");
			$("div").remove(".cropper-container");
		});

		$("#avatar-image-input").click(()=>{
			crop()
		})
		$("#avatar-image-input-0").click(()=>{
			cropAvatarAgain()
		})
		

		$("#large-image-input").click(()=>{
			cropLargeImg()
		})
		$("#change-large-img").click(()=>{
			document.getElementById("change-large-img-input").click()
		})
		$('#change-large-img-input').click(()=>{
			cropLargeImgAgain()
		})

		var crop = function(){

			var Cropper = window.Cropper;
			var URL = window.URL || window.webkitURL;
			var container = document.querySelector('.img-container');
			var image = container.getElementsByTagName('img').item(0);
			var download = document.getElementById('download-avatar');
			var actions = document.getElementById('actions');
			var options = {
				aspectRatio: 1,
				autoCropArea: 1,
				zoomable: false,
				zoomOnTouch: false,
				zoomOnWheel: false,
				dragMode: 'none',
			};
			var cropper = new Cropper(image, options);
			var originalImageURL = image.src;
			var uploadedImageType = 'image/*';
			var uploadedImageName = 'cropped.jpeg';
			var uploadedImageURL;

			// Buttons
			if (!document.createElement('canvas').getContext) {
				$('button[data-method="getCroppedCanvas"]').prop('disabled', true);
			}

			if (typeof document.createElement('cropper').style.transition === 'undefined') {
				$('button[data-method="rotate"]').prop('disabled', true);
				$('button[data-method="scale"]').prop('disabled', true);
			}

			// Methods
			actions.querySelector('.docs-buttons').onclick = function (event) {
				var e = event || window.event;
				var target = e.target || e.srcElement;
				var cropped;
				var result;
				var input;
				var data;

				if (!cropper) {
					return;
				}
				while (target !== this) {
					if (target.getAttribute('data-method')) {
						break;
					}

					target = target.parentNode;
				}
				if (target === this || target.disabled || target.className.indexOf('disabled') > -1) {
					return;
				}
				data = {
					method: target.getAttribute('data-method'),
					target: target.getAttribute('data-target'),
					option: target.getAttribute('data-option') || undefined,
					secondOption: target.getAttribute('data-second-option') || undefined
				};
				cropped = cropper.cropped;
				if (data.method) {
					if (typeof data.target !== 'undefined') {
						input = document.querySelector(data.target);

						if (!target.hasAttribute('data-option') && data.target && input) {
							try {
								data.option = JSON.parse(input.value);
							} catch (e) {
								console.log(e.message);
							}
						}
					}
					switch (data.method) {
						case 'getCroppedCanvas':
							try {
								data.option = JSON.parse(data.option);
							} catch (e) {
								console.log(e.message);
							}
							if (uploadedImageType === 'image/*') {
								if (!data.option) {
									data.option = {};
								}
								data.option.fillColor = '#fff';
							}
							break;
					}
					result = cropper[data.method](data.option, data.secondOption);

					switch (data.method) {
						case 'getCroppedCanvas':
							if (result) {
								console.log(result)
								if (!download.disabled) {
									download.download = uploadedImageName;
									download.href = result.toDataURL(uploadedImageType);

									$("p.img-desc").html(uploadedImageName+"<span><br>150x150</span>");
									$("p.img-desc").addClass('avatar-name')
									$( "div.avatar-image-input" ).replaceWith( "<img class='avatar-image-input' id='output' />" );
									var output = document.getElementById('output');
									output.src = result.toDataURL(uploadedImageType)
									
									$( "span.avatar-img" ).replaceWith( "<img class='avatar-img' id='output-preview' />" );
									var output_preview = document.getElementById('output-preview');
									output_preview.src = result.toDataURL(uploadedImageType)
								}
							}

							break;
					}

					if (typeof result === 'object' && result !== cropper && input) {
						try {
							input.value = JSON.stringify(result);
						} catch (e) {
							console.log(e.message);
						}
					}
				}
			};


			// Import image
			var inputImage = document.getElementById('avatar-image-input');

			if (URL) {
				inputImage.onchange = function () {
					var files = this.files;
					var file;

					if (cropper && files && files.length) {

						$("html").addClass("overlay-modal");
						$("#modalEditImg").addClass("show");

						file = files[0];

						if (/^image\/\w+/.test(file.type)) {
							uploadedImageType = file.type;
							uploadedImageName = file.name;

							if (uploadedImageURL) {
								URL.revokeObjectURL(uploadedImageURL);
							}

							image.src = uploadedImageURL = URL.createObjectURL(file);
							cropper.destroy();
							cropper = new Cropper(image, options);
							inputImage.value = null;
						} else {
							window.alert('Please choose an image file.');
						}
					}
				};
			} else {
				inputImage.disabled = true;
				inputImage.parentNode.className += ' disabled';
			}	
		};
		var cropAvatarAgain = function(){

			var Cropper = window.Cropper;
			var URL = window.URL || window.webkitURL;
			var container = document.querySelector('.img-container');
			var image = container.getElementsByTagName('img').item(0);
			var download = document.getElementById('download-avatar');
			var actions = document.getElementById('actions');
			var options = {
				aspectRatio: 1,
				autoCropArea: 1,
				zoomable: false,
				zoomOnTouch: false,
				zoomOnWheel: false,
				dragMode: 'none',
			};
			var cropper = new Cropper(image, options);
			var originalImageURL = image.src;
			var uploadedImageType = 'image/*';
			var uploadedImageName = 'cropped.jpeg';
			var uploadedImageURL;

			// Buttons
			if (!document.createElement('canvas').getContext) {
				$('button[data-method="getCroppedCanvas"]').prop('disabled', true);
			}

			if (typeof document.createElement('cropper').style.transition === 'undefined') {
				$('button[data-method="rotate"]').prop('disabled', true);
				$('button[data-method="scale"]').prop('disabled', true);
			}

			// Methods
			actions.querySelector('.docs-buttons').onclick = function (event) {
				var e = event || window.event;
				var target = e.target || e.srcElement;
				var cropped;
				var result;
				var input;
				var data;

				if (!cropper) {
					return;
				}
				while (target !== this) {
					if (target.getAttribute('data-method')) {
						break;
					}

					target = target.parentNode;
				}
				if (target === this || target.disabled || target.className.indexOf('disabled') > -1) {
					return;
				}
				data = {
					method: target.getAttribute('data-method'),
					target: target.getAttribute('data-target'),
					option: target.getAttribute('data-option') || undefined,
					secondOption: target.getAttribute('data-second-option') || undefined
				};
				cropped = cropper.cropped;
				if (data.method) {
					if (typeof data.target !== 'undefined') {
						input = document.querySelector(data.target);

						if (!target.hasAttribute('data-option') && data.target && input) {
							try {
								data.option = JSON.parse(input.value);
							} catch (e) {
								console.log(e.message);
							}
						}
					}
					switch (data.method) {
						case 'getCroppedCanvas':
							try {
								data.option = JSON.parse(data.option);
							} catch (e) {
								console.log(e.message);
							}
							if (uploadedImageType === 'image/*') {
								if (!data.option) {
									data.option = {};
								}
								data.option.fillColor = '#fff';
							}
							break;
					}
					result = cropper[data.method](data.option, data.secondOption);

					switch (data.method) {
						case 'getCroppedCanvas':
							if (result) {
								console.log(result)
								if (!download.disabled) {
									download.download = uploadedImageName;
									download.href = result.toDataURL(uploadedImageType);

									$("p.img-desc").html(uploadedImageName+"<span><br>150x150</span>");
									$("p.img-desc").addClass('avatar-name')

									document.getElementById('output').src = result.toDataURL(uploadedImageType)
									document.getElementById('output-preview').src = result.toDataURL(uploadedImageType)
								}
							}

							break;
					}

					if (typeof result === 'object' && result !== cropper && input) {
						try {
							input.value = JSON.stringify(result);
						} catch (e) {
							console.log(e.message);
						}
					}
				}
			};


			// Import image
			var inputImage = document.getElementById('avatar-image-input-0');

			if (URL) {
				inputImage.onchange = function () {
					var files = this.files;
					var file;

					if (cropper && files && files.length) {

						$("html").addClass("overlay-modal");
						$("#modalEditImg").addClass("show");

						file = files[0];

						if (/^image\/\w+/.test(file.type)) {
							uploadedImageType = file.type;
							uploadedImageName = file.name;

							if (uploadedImageURL) {
								URL.revokeObjectURL(uploadedImageURL);
							}

							image.src = uploadedImageURL = URL.createObjectURL(file);
							cropper.destroy();
							cropper = new Cropper(image, options);
							inputImage.value = null;
						} else {
							window.alert('Please choose an image file.');
						}
					}
				};
			} else {
				inputImage.disabled = true;
				inputImage.parentNode.className += ' disabled';
			}	
		};
		var cropLargeImg = function(){

			var Cropper = window.Cropper;
			var URL = window.URL || window.webkitURL;
			var container = document.querySelector('.img-container');
			var image = container.getElementsByTagName('img').item(0);
			var download = document.getElementById('download-large-image');
			var actions = document.getElementById('actions');
			var options = {
				aspectRatio: 1024/533,
				autoCropArea: 1,
				zoomable: false,
				zoomOnTouch: false,
				zoomOnWheel: false,
				dragMode: 'none',
			};
			var cropper = new Cropper(image, options);
			var originalImageURL = image.src;
			var uploadedImageType = 'image/*';
			var uploadedImageName = 'cropped.jpeg';
			var uploadedImageURL;

			// Buttons
			if (!document.createElement('canvas').getContext) {
				$('button[data-method="getCroppedCanvas"]').prop('disabled', true);
			}

			if (typeof document.createElement('cropper').style.transition === 'undefined') {
				$('button[data-method="rotate"]').prop('disabled', true);
				$('button[data-method="scale"]').prop('disabled', true);
			}

			// Methods
			actions.querySelector('.docs-buttons').onclick = function (event) {
				var e = event || window.event;
				var target = e.target || e.srcElement;
				var cropped;
				var result;
				var input;
				var data;

				if (!cropper) {
					return;
				}
				while (target !== this) {
					if (target.getAttribute('data-method')) {
						break;
					}

					target = target.parentNode;
				}
				if (target === this || target.disabled || target.className.indexOf('disabled') > -1) {
					return;
				}
				data = {
					method: target.getAttribute('data-method'),
					target: target.getAttribute('data-target'),
					option: target.getAttribute('data-option') || undefined,
					secondOption: target.getAttribute('data-second-option') || undefined
				};
				cropped = cropper.cropped;
				if (data.method) {
					if (typeof data.target !== 'undefined') {
						input = document.querySelector(data.target);

						if (!target.hasAttribute('data-option') && data.target && input) {
							try {
								data.option = JSON.parse(input.value);
							} catch (e) {
								console.log(e.message);
							}
						}
					}
					switch (data.method) {
						case 'getCroppedCanvas':
							try {
								data.option = JSON.parse(data.option);
							} catch (e) {
								console.log(e.message);
							}
							if (uploadedImageType === 'image/*') {
								if (!data.option) {
									data.option = {};
								}
								data.option.fillColor = '#fff';
							}
							break;
					}
					result = cropper[data.method]({width: 1024, height: 533}, data.secondOption);

					switch (data.method) {
						case 'getCroppedCanvas':
							if (result) {
								console.log(result)
								if (!download.disabled) {
									download.download = uploadedImageName;
									download.href = result.toDataURL(uploadedImageType);
									$(".large-image-preview").addClass('is-show')
									$(".large-image-input").addClass('is-hidden')

									$(".large-img-name").html(uploadedImageName+"<br><span>1024 x 533</span>")

									document.getElementById('output-large-preview').style.backgroundImage = 'url(' + result.toDataURL(uploadedImageType) + ')'

									$( ".preview-sample" ).replaceWith( "<img class='preview-sample' id='output-preview-large' style='background:none;'/>" );
									var output_preview_large = document.getElementById('output-preview-large');
									output_preview_large.src = result.toDataURL(uploadedImageType)
								
									//check blur
									let imgElement = document.getElementById('output-preview-large');
									imgElement.onload = function () {
										let src = cv.imread(imgElement);
										let dst = new cv.Mat();
										let men = new cv.Mat();
										let menO = new cv.Mat();
										cv.cvtColor(src, src, cv.COLOR_RGB2GRAY, 0);
										// You can try more different parameters
										var t = cv.Laplacian(src, dst, cv.CV_64F, 1, 1, 0, cv.BORDER_DEFAULT);
										console.log(t, cv.meanStdDev(dst, menO, men), menO.data64F[0], men.data64F[0]);
										console.log(men.data64F[0])
										if (men.data64F[0] > 10) {
											document.getElementById('img-quality').innerHTML = 'Đạt'
										} else {
											document.getElementById('img-quality').innerHTML = 'Mờ'
										}
										// cv.imshow('canvasOutput', dst);
										src.delete(); dst.delete();
									};
								
									$(".ads-img .squares").addClass("is-show");

								}
							}

							break;
					}

					if (typeof result === 'object' && result !== cropper && input) {
						try {
							input.value = JSON.stringify(result);
						} catch (e) {
							console.log(e.message);
						}
					}
				}
			};


			// Import image
			var inputImage = document.getElementById('large-image-input');

			if (URL) {
				inputImage.onchange = function () {
					var files = this.files;
					var file;

					if (cropper && files && files.length) {

						$("html").addClass("overlay-modal");
						$("#modalEditImg").addClass("show");

						file = files[0];

						if (/^image\/\w+/.test(file.type)) {
							uploadedImageType = file.type;
							uploadedImageName = file.name;

							if (uploadedImageURL) {
								URL.revokeObjectURL(uploadedImageURL);
							}

							image.src = uploadedImageURL = URL.createObjectURL(file);
							cropper.destroy();
							cropper = new Cropper(image, options);
							inputImage.value = null;
						} else {
							window.alert('Please choose an image file.');
						}
					}
				};
			} else {
				inputImage.disabled = true;
				inputImage.parentNode.className += ' disabled';
			}	
		};
		var cropLargeImgAgain = function(){

			var Cropper = window.Cropper;
			var URL = window.URL || window.webkitURL;
			var container = document.querySelector('.img-container');
			var image = container.getElementsByTagName('img').item(0);
			var download = document.getElementById('download-large-image');
			var actions = document.getElementById('actions');
			var options = {
				aspectRatio: 1024/533,
				autoCropArea: 1,
				zoomable: false,
				zoomOnTouch: false,
				zoomOnWheel: false,
				dragMode: 'none',
			};
			var cropper = new Cropper(image, options);
			var originalImageURL = image.src;
			var uploadedImageType = 'image/*';
			var uploadedImageName = 'cropped.jpeg';
			var uploadedImageURL;

			// Buttons
			if (!document.createElement('canvas').getContext) {
				$('button[data-method="getCroppedCanvas"]').prop('disabled', true);
			}

			if (typeof document.createElement('cropper').style.transition === 'undefined') {
				$('button[data-method="rotate"]').prop('disabled', true);
				$('button[data-method="scale"]').prop('disabled', true);
			}

			// Methods
			actions.querySelector('.docs-buttons').onclick = function (event) {
				var e = event || window.event;
				var target = e.target || e.srcElement;
				var cropped;
				var result;
				var input;
				var data;

				if (!cropper) {
					return;
				}
				while (target !== this) {
					if (target.getAttribute('data-method')) {
						break;
					}

					target = target.parentNode;
				}
				if (target === this || target.disabled || target.className.indexOf('disabled') > -1) {
					return;
				}
				data = {
					method: target.getAttribute('data-method'),
					target: target.getAttribute('data-target'),
					option: target.getAttribute('data-option') || undefined,
					secondOption: target.getAttribute('data-second-option') || undefined
				};
				cropped = cropper.cropped;
				if (data.method) {
					if (typeof data.target !== 'undefined') {
						input = document.querySelector(data.target);

						if (!target.hasAttribute('data-option') && data.target && input) {
							try {
								data.option = JSON.parse(input.value);
							} catch (e) {
								console.log(e.message);
							}
						}
					}
					switch (data.method) {
						case 'getCroppedCanvas':
							try {
								data.option = JSON.parse(data.option);
							} catch (e) {
								console.log(e.message);
							}
							if (uploadedImageType === 'image/*') {
								if (!data.option) {
									data.option = {};
								}
								data.option.fillColor = '#fff';
							}
							break;
					}
					result = cropper[data.method]({width: 1024, height: 533}, data.secondOption);

					switch (data.method) {
						case 'getCroppedCanvas':
							if (result) {
								console.log(result)
								if (!download.disabled) {
									download.download = uploadedImageName;
									download.href = result.toDataURL(uploadedImageType);

									$(".large-img-name").html(uploadedImageName+"<br><span>1024 x 533</span>")

									document.getElementById('output-large-preview').style.backgroundImage = 'url(' + result.toDataURL(uploadedImageType) + ')'

									var output_preview_large = document.getElementById('output-preview-large');
									output_preview_large.src = result.toDataURL(uploadedImageType)
								
									//check blur
									let imgElement = document.getElementById('output-preview-large');
									imgElement.onload = function () {
										let src = cv.imread(imgElement);
										let dst = new cv.Mat();
										let men = new cv.Mat();
										let menO = new cv.Mat();
										cv.cvtColor(src, src, cv.COLOR_RGB2GRAY, 0);
										// You can try more different parameters
										var t = cv.Laplacian(src, dst, cv.CV_64F, 1, 1, 0, cv.BORDER_DEFAULT);
										console.log(t, cv.meanStdDev(dst, menO, men), menO.data64F[0], men.data64F[0]);
										if (men.data64F[0] > 10) {
											document.getElementById('img-quality').innerHTML = 'Đạt'
										} else {
											document.getElementById('img-quality').innerHTML = 'Mờ'
										}
										// cv.imshow('canvasOutput', dst);
										src.delete(); dst.delete();
									};
								
									$(".ads-img .squares").addClass("is-show");

								}
							}

							break;
					}

					if (typeof result === 'object' && result !== cropper && input) {
						try {
							input.value = JSON.stringify(result);
						} catch (e) {
							console.log(e.message);
						}
					}
				}
			};


			// Import image
			var inputImage = document.getElementById('change-large-img-input');

			if (URL) {
				inputImage.onchange = function () {
					var files = this.files;
					var file;

					if (cropper && files && files.length) {

						$("html").addClass("overlay-modal");
						$("#modalEditImg").addClass("show");

						file = files[0];

						if (/^image\/\w+/.test(file.type)) {
							uploadedImageType = file.type;
							uploadedImageName = file.name;

							if (uploadedImageURL) {
								URL.revokeObjectURL(uploadedImageURL);
							}

							image.src = uploadedImageURL = URL.createObjectURL(file);
							cropper.destroy();
							cropper = new Cropper(image, options);
							inputImage.value = null;
						} else {
							window.alert('Please choose an image file.');
						}
					}
				};
			} else {
				inputImage.disabled = true;
				inputImage.parentNode.className += ' disabled';
			}	
		};

		$("#check-grid").change(function(event){
			if (this.checked){
				$(".ads-img .squares").addClass("is-show");
			} else {
				$(".ads-img .squares").removeClass("is-show");
			}
		});
		count = 0;
		//- $(".check-msg").hide();
		$(function() {
			$(".square").click(function() {
				if ($(this).hasClass('is-selected')){
					$(this).removeClass("is-selected");
					count = count-1;
				} else {
					$(this).addClass("is-selected");
					count = count+1;
				}
				percent = Math.round(100*(count/25));
				$(".check-msg").hide();
				
				if (count<8){
					message = "(Đạt yêu cầu)";
					$(".check-msg").removeClass("is-no");
					$(".check-msg").addClass("is-ok");
				} else {
					message = "(Vượt quá 30%)";
					$(".check-msg").removeClass("is-ok");
					$(".check-msg").addClass("is-no");
				}
				
				$(".check-msg").html(percent+"%");
				
				$(".check-msg").fadeIn("fast", function() {});
			});
		});

		document.getElementById('avatar-image-input').onmouseover = () => {
			document.getElementsByClassName('avatar-image-input')[0].style.backgroundColor = '#F0F4F8'
		}
		document.getElementById('avatar-image-input').onmouseout = () => {
			document.getElementsByClassName('avatar-image-input')[0].style.backgroundColor = '#FAFBFD'
		}

		document.getElementById('large-image-input').onmouseover = () => {
			document.getElementsByClassName('large-image-input')[0].style.backgroundColor = '#F0F4F8'
		}
		document.getElementById('large-image-input').onmouseout = () => {
			document.getElementsByClassName('large-image-input')[0].style.backgroundColor = '#FAFBFD'
		}
		document.getElementById('large-image-input').ondrop = (value) => {
			cropLargeImg()
			document.getElementsByClassName('large-image-input')[0].style.backgroundColor = '#F0F4F8'
		}

		const content_card_0 = document.getElementById('content-card-first')
		const content_card_1 = document.getElementById('content-card-second')

		const warning_word_card = document.getElementById('alert-card-first')
		const warning_uppercase_card = document.getElementById('alert-card-second')
		const banned_word_card = document.getElementById('alert-card-third')
		const successful_card = document.getElementById('successful-card')

		let first_input = document.getElementById('first-input')
		let second_input = document.getElementById('second-input')
		let third_input = document.getElementById('third-input')
		let fourth_input = document.getElementById('fourth-input')

		let first_max_letter = document.getElementById('max-letter-first')
		let second_max_letter = document.getElementById('max-letter-second')
		let third_max_letter = document.getElementById('max-letter-third')
		let fourth_max_letter = document.getElementById('max-letter-fourth')

		let first_content_preview = document.getElementById('first-preview')
		let second_content_preview = document.getElementById('second-preview')
		let third_content_preview = document.getElementById('third-preview')
		let fourth_content_preview = document.getElementById('fourth-preview')

		first_input.oninput = value =>{
			if(value.target.value){
				first_content_preview.innerHTML = value.target.value
				first_max_letter.innerHTML = first_input.maxLength - first_input.value.length
				if(second_input.value || third_input.value || fourth_input.value){
					//do nothing cause it's done already
				}
				else{
					content_card_0.classList.add('is-hidden')
					content_card_1.classList.remove('is-hidden')
				}
			} else {
				first_content_preview.innerHTML = 'Tiêu đề quảng cáo'
				first_max_letter.innerHTML = first_input.maxLength
				if(second_input.value || third_input.value || fourth_input.value){
					//do nothing cause it's done already
				}
				else{
					content_card_0.classList.remove('is-hidden')
					content_card_1.classList.add('is-hidden')
				}
			}
		}

		second_input.oninput = value =>{
			if(value.target.value){
				second_content_preview.innerHTML = value.target.value
				second_max_letter.innerHTML = second_input.maxLength - second_input.value.length
				if(first_input.value || third_input.value || fourth_input.value){
					//do nothing cause it's done already
				}
				else{
					content_card_0.classList.add('is-hidden')
					content_card_1.classList.remove('is-hidden')
				}
			} else {
				second_content_preview.innerHTML = 'Nội dung quảng cáo'
				second_max_letter.innerHTML = second_input.maxLength
				if(first_input.value || third_input.value || fourth_input.value){
					//do nothing cause it's done already
				}
				else{
					content_card_0.classList.remove('is-hidden')
					content_card_1.classList.add('is-hidden')
				}
			}
		}

		third_input.oninput = value =>{
			if(value.target.value){
				third_content_preview.innerHTML = value.target.value
				third_max_letter.innerHTML = third_input.maxLength - third_input.value.length
				if(second_input.value || first_input.value || fourth_input.value){
					//do nothing cause it's done already
				}
				else{
					content_card_0.classList.add('is-hidden')
					content_card_1.classList.remove('is-hidden')
				}
			} else {
				third_content_preview.innerHTML = 'Mô tả thêm'
				third_max_letter.innerHTML = third_input.maxLength
				if(second_input.value || first_input.value || fourth_input.value){
					//do nothing cause it's done already
				}
				else{
					content_card_0.classList.remove('is-hidden')
					content_card_1.classList.add('is-hidden')
				}
			}
		}

		fourth_input.oninput = value =>{
			if(value.target.value){
				fourth_content_preview.innerHTML = value.target.value
				fourth_max_letter.innerHTML = fourth_input.maxLength - fourth_input.value.length
				if(second_input.value || first_input.value || third_input.value){
					//do nothing cause it's done already
				}
				else{
					content_card_0.classList.add('is-hidden')
					content_card_1.classList.remove('is-hidden')
				}
			} else {
				fourth_content_preview.innerHTML = 'Thông tin thêm'
				fourth_max_letter.innerHTML = fourth_input.maxLength
				if(second_input.value || first_input.value || third_input.value){
					//do nothing cause it's done already
				}
				else{
					content_card_0.classList.remove('is-hidden')
					content_card_1.classList.add('is-hidden')
				}
			}
		}
		
		document.getElementById('fifth-input').onchange = value =>{
			if(value.target.value){
				document.getElementById('fifth-preview').innerHTML = value.target.value
			} else {
				document.getElementById('fifth-preview').innerHTML = 'Mua ngay'
			}
		}

		function focusFirstInput(){
			first_input.focus()
		}

		let banned_words = [
			'duy nhất', 'tốt nhất', 'nhất','cam kết'
		]
		// check banned words
		function checkPolicy(val) {
			let valueLower = val.toLowerCase()
			let getBanWordsList = []
			for (let i = 0; i < banned_words.length; i++) {
				if(valueLower.includes(banned_words[i])) {
					getBanWordsList.push(banned_words[i])
				}	
			}
			return getBanWordsList
		}

		let warning_words = [
			'tin nóng', 'tin giật gân', 'tin 24h'
		]
		// check warning
		function checkWarning(val) {
			let valueLower = val.toLowerCase()
			let getBanWordsList = []
			for (let i = 0; i < warning_words.length; i++) {
				if(valueLower.includes(warning_words[i])) {
					getBanWordsList.push(warning_words[i])
				}	
			}
			return getBanWordsList
		}
		function checkFormat(val) {
			if(val.charAt(0) != val.charAt(0).toUpperCase() || val.charAt(0) == ' ')
				return 1;
					return 0;
		}
		function checkFormat2(val) {
			for(let i = 1; i<val.length; i++){
				if(val[i] != val[i].toLowerCase()){
					return 1;
					break;
				}
			}
		}
		//click button Test
		const InputFormat = /^[a-z0-9A-ZÀÁÂÃÈÉÊÌÍÒÓÔÕÙÚĂĐĨŨƠàáâãèéêìíòóôõùúăđĩũơƯĂẠẢẤẦẨẪẬẮẰẲẴẶẸẺẼỀỀỂẾưăạảấầẩẫậắằẳẵặẹẻẽềềểếỄỆỈỊỌỎỐỒỔỖỘỚỜỞỠỢỤỦỨỪễệỉịọỏốồổỗộớờởỡợụủứừỬỮỰỲỴÝỶỸửữựỳỵỷỹ\s]+$/g
		document.getElementById('check-form-ad').onclick = value =>{
			
			let value_1 = first_input.value
			let value_2 = second_input.value
			let value_3 = third_input.value
			let value_4 = fourth_input.value

			let check_correct = 0

			if(value_1 || value_2 || value_3 || value_4){
				warning_word_card.classList.add('is-hidden')
				warning_uppercase_card.classList.add('is-hidden')
				banned_word_card.classList.add('is-hidden')
				successful_card.classList.add('is-hidden')
			}

			$('.error-item').remove()

			if(!first_input.value){
				first_input.focus()
			} else if(!second_input.value){
				second_input.focus()
			} else {
				if(value_1.indexOf("  ") > -1 || value_2.indexOf("  ") > -1 
					|| value_1.indexOf("...") > -1 || value_2.indexOf("...") > -1
					|| value_1.match(InputFormat) == null || value_2.match(InputFormat) == null
					|| checkFormat(value_1) == 1 || checkFormat(value_2) == 1
					|| checkFormat2(value_1) == 1 || checkFormat2(value_2) == 1){
					content_card_1.classList.add('is-hidden')
					warning_uppercase_card.classList.remove('is-hidden')
					
				} else if(checkPolicy(value_1).length > 0 || checkPolicy(value_2).length > 0){
					content_card_1.classList.add('is-hidden')
					banned_word_card.classList.remove('is-hidden')
					
					let list_1 = checkPolicy(value_1)
					let list_2 = checkPolicy(value_2)
					let list = list_1.concat(list_2)
					for(let i = 0; i < list.length; i++){
						$("#alert-card-third .card-error-list").append( "<p class='error-item' id='first-"+i+"'>"+list[i]+" </pp" )
					}
				} else if(checkWarning(value_1).length > 0 || checkWarning(value_2).length > 0){
					content_card_1.classList.add('is-hidden')
					warning_word_card.classList.remove('is-hidden')
					
					let list_1 = checkWarning(value_1)
					let list_2 = checkWarning(value_2)
					let list = list_1.concat(list_2)
					for(let i = 0; i < list.length; i++){
						$("#alert-card-first .card-error-list").append( "<p class='error-item' id='first-"+i+"'>"+list[i]+" </pp" )
					}
				} else {
					content_card_1.classList.add('is-hidden')
					if(value_3 || value_4){
						if(value_3){
							if(value_3.indexOf("  ") > -1 
								|| value_3.indexOf("...") > -1
								|| value_3.match(InputFormat) == null
								|| checkFormat(value_3) == 1
								|| checkFormat2(value_3) == 1){
								content_card_1.classList.add('is-hidden')
								warning_uppercase_card.classList.remove('is-hidden')
								successful_card.classList.add('is-hidden')
							} else if(checkPolicy(value_3).length > 0){
								content_card_1.classList.add('is-hidden')
								banned_word_card.classList.remove('is-hidden')
								successful_card.classList.add('is-hidden')
								let list = checkPolicy(value_3)
								for(let i = 0; i < list.length; i++){
									$("#alert-card-third .card-error-list").append("<p class='error-item' id='third-"+i+"'>"+list[i]+" </pp" )
								}
							} else if(checkWarning(value_3).length > 0){
								content_card_1.classList.add('is-hidden')
								warning_word_card.classList.remove('is-hidden')
								successful_card.classList.add('is-hidden')
								let list = checkWarning(value_3)
								for(let i = 0; i < list.length; i++){
									$("#alert-card-first .card-error-list").append("<p class='error-item' id='third-"+i+"'>"+list[i]+" </pp" )
								}
							} else {
								successful_card.classList.remove('is-hidden')
							}
						} else {
							if(value_4.indexOf("  ") > -1 
								|| value_4.indexOf("...") > -1
								|| value_4.match(InputFormat) == null
								|| checkFormat(value_4) == 1
								|| checkFormat2(value_4) == 1){
								content_card_1.classList.add('is-hidden')
								warning_uppercase_card.classList.remove('is-hidden')
								successful_card.classList.add('is-hidden')
							} else if(checkPolicy(value_4).length > 0){
								content_card_1.classList.add('is-hidden')
								banned_word_card.classList.remove('is-hidden')
								successful_card.classList.add('is-hidden')
								let list = checkPolicy(value_4)
								for(let i = 0; i < list.length; i++){
									$("#alert-card-third .card-error-list").append( "<p class='error-item' id='fourth-"+i+"'>"+list[i]+" </p>" )
								}
							} else if(checkWarning(value_4).length > 0){
								content_card_1.classList.add('is-hidden')
								warning_word_card.classList.remove('is-hidden')
								successful_card.classList.add('is-hidden')
								let list = checkWarning(value_4)
								for(let i = 0; i < list.length; i++){
									$("#alert-card-first .card-error-list").append( "<p class='error-item' id='fourth-"+i+"'>"+list[i]+" </p>" )
								}
							} else {
								successful_card.classList.remove('is-hidden')
							}
						}
					} else if(value_3 && value_4){
						if(value_3.indexOf("  ") > -1 || value_4.indexOf("  ") > -1 
							|| value_3.indexOf("...") > -1 || value_4.indexOf("...") > -1
							|| value_3.match(InputFormat) == null || value_4.match(InputFormat) == null
							|| checkFormat(value_3) == 1 || checkFormat(value_4) == 1
							|| checkFormat2(value_3) == 1 || checkFormat2(value_4) == 1){
							content_card_1.classList.add('is-hidden')
							warning_uppercase_card.classList.remove('is-hidden')	
						} else if(checkPolicy(value_3).length > 0 || checkPolicy(value_4).length > 0){
							content_card_1.classList.add('is-hidden')
							banned_word_card.classList.remove('is-hidden')
							
							let list_1 = checkPolicy(value_3)
							let list_2 = checkPolicy(value_4)
							let list = list_1.concat(list_2)
							for(let i = 0; i < list.length; i++){
								$("#alert-card-third .card-error-list").append( "<p class='error-item' id='first-"+i+"'>"+list[i]+" </pp" )
							}
						} else if(checkWarning(value_3).length > 0 || checkWarning(value_4).length > 0){
							content_card_1.classList.add('is-hidden')
							warning_word_card.classList.remove('is-hidden')
							
							let list_1 = checkWarning(value_3)
							let list_2 = checkWarning(value_4)
							let list = list_1.concat(list_2)
							for(let i = 0; i < list.length; i++){
								$("#alert-card-first .card-error-list").append( "<p class='error-item' id='first-"+i+"'>"+list[i]+" </pp" )
							}
						} else {
						}
					}
				}
			}

			//- if(value_3){
			//- 	if(value_3.indexOf("  ") > -1 
			//- 		|| value_3.indexOf("...") > -1
			//- 		|| value_3.match(InputFormat) == null
			//- 		|| checkFormat(value_3) == 1
			//- 		|| checkFormat2(value_3) == 1){
			//- 		content_card_1.classList.add('is-hidden')
			//- 		warning_uppercase_card.classList.remove('is-hidden')
					
			//- 	} else if(checkPolicy(value_3).length > 0){
			//- 		content_card_1.classList.add('is-hidden')
			//- 		banned_word_card.classList.remove('is-hidden')
					
			//- 		let list = checkPolicy(value_3)
			//- 		for(let i = 0; i < list.length; i++){
			//- 			$("#alert-card-third .card-error-list").append("<p class='error-item' id='third-"+i+"'>"+list[i]+" </pp" )
			//- 		}
			//- 	} else if(checkWarning(value_3).length > 0){
			//- 		content_card_1.classList.add('is-hidden')
			//- 		warning_word_card.classList.remove('is-hidden')
					
			//- 		let list = checkWarning(value_3)
			//- 		for(let i = 0; i < list.length; i++){
			//- 			$("#alert-card-first .card-error-list").append("<p class='error-item' id='third-"+i+"'>"+list[i]+" </pp" )
			//- 		}
			//- 	} else {
			//- 		check_correct +=1
			//- 	}
			//- }
			//- if(value_4){
			//- 	if(value_4.indexOf("  ") > -1 
			//- 		|| value_4.indexOf("...") > -1
			//- 		|| value_4.match(InputFormat) == null
			//- 		|| checkFormat(value_4) == 1
			//- 		|| checkFormat2(value_4) == 1){
			//- 		content_card_1.classList.add('is-hidden')
			//- 		warning_uppercase_card.classList.remove('is-hidden')
					
			//- 	} else if(checkPolicy(value_4).length > 0){
			//- 		content_card_1.classList.add('is-hidden')
			//- 		banned_word_card.classList.remove('is-hidden')
					
			//- 		let list = checkPolicy(value_4)
			//- 		for(let i = 0; i < list.length; i++){
			//- 			$("#alert-card-third .card-error-list").append( "<p class='error-item' id='fourth-"+i+"'>"+list[i]+" </p>" )
			//- 		}
			//- 	} else if(checkWarning(value_4).length > 0){
			//- 		content_card_1.classList.add('is-hidden')
			//- 		warning_word_card.classList.remove('is-hidden')
					
			//- 		let list = checkWarning(value_4)
			//- 		for(let i = 0; i < list.length; i++){
			//- 			$("#alert-card-first .card-error-list").append( "<p class='error-item' id='fourth-"+i+"'>"+list[i]+" </p>" )
			//- 		}
			//- 	} else {
			//- 		check_correct +=1
			//- 	}
			//- }

			//- console.log(check_correct)
			//- if(check_correct >= 3){
			//- 	if(value_1 && value_2 && value_3 && value_4){
			//- 		content_card_1.classList.add('is-hidden')
			//- 		successful_card.classList.remove('is-hidden')
			//- 	}
			//- } else if(check_correct >= 2){
			//- 	if((value_1 && value_2 && value_4)||(value_1 && value_2 && value_3)){
			//- 		content_card_1.classList.add('is-hidden')
			//- 		successful_card.classList.remove('is-hidden')
			//- 	}
			//- } else if(check_correct >= 1){
			//- 	if(value_1 && value_2){
			//- 		content_card_1.classList.add('is-hidden')
			//- 		successful_card.classList.remove('is-hidden')
			//- 	}
			//- } else {
			//- 	console.log('error')
			//- }

		}

		$('.card-error-list p.error-item').click(()=>{
			console.log($(this).attr('id'))
		})

		first_input.onfocus = value => {
			first_content_preview.classList.add('preview-focus')
			second_content_preview.classList.remove('preview-focus')
			third_content_preview.classList.remove('preview-focus')
			fourth_content_preview.classList.remove('preview-focus')
		}
		first_input.onblur = value =>{
			first_content_preview.classList.toggle('preview-focus')
		}
		second_input.onfocus = value => {
			second_content_preview.classList.add('preview-focus')
			first_content_preview.classList.remove('preview-focus')
			third_content_preview.classList.remove('preview-focus')
			fourth_content_preview.classList.remove('preview-focus')
		}
		second_input.onblur = value =>{
			second_content_preview.classList.toggle('preview-focus')
		}
		third_input.onfocus = value => {
			third_content_preview.classList.add('preview-focus')
			second_content_preview.classList.remove('preview-focus')
			first_content_preview.classList.remove('preview-focus')
			fourth_content_preview.classList.remove('preview-focus')
		}
		third_input.onblur = value =>{
			third_content_preview.classList.toggle('preview-focus')
		}
		fourth_input.onfocus = value => {
			fourth_content_preview.classList.add('preview-focus')
			second_content_preview.classList.remove('preview-focus')
			third_content_preview.classList.remove('preview-focus')
			first_content_preview.classList.remove('preview-focus')
		}
		fourth_input.onblur = value =>{
			fourth_content_preview.classList.toggle('preview-focus')
		}